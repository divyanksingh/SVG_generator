#!/usr/bin/env python

"""
script can be run as
./generate_trend_graph.py 1428998000 1429601000 testdata.txt output2.svg

Parameters
----------
arg1: start unix timestamp
arg2: end unix timestamp
arg3: full path of input data file
arg4: full path of output svg file

Returns
----------
error message in case of invalid inputs or exceptions

success message with output file path in case of successful completion

"""

import sys, os
import svgwrite

def read_data_file(start, end, data_file):

	"""
	Create a 2-dimensional list of the form 
	[['1429591293', 'True', 130], ['1429591423', 'False', 182],\
	 ['1429591605', 'True', 247], ['1429591852', 'False', 39],\
	  ['1429591891', 'True', 117], ['1429592008', 'False', 26]]

	where each sublist is as follows:
	first member: timestamp of state change or start/end in case of\
	 first and last elements
	second member: new state at the timestamp of first member
	third member: number of seconds the current state prevails 

	This 2-D list serves as a queue between input data file and the \
	output svg file.

	Parameters
	----------
	
	start : str
	    start timestamp received as command line argument
	end : str
	    end timestamp received as command line argument
	data_file : str
	    input file received as command line argument

	Returns
	----------
	list
	   A 2-D list with all the state change points and state durations\
	    captured
	"""
	change_queue = []
	try:
		with open(r'%s' %data_file) as f:
			line_list = f.readlines()
			try:
				first = line_list[0].split()[0]
				last = line_list[-1].split()[0]
				if start < int(first) or end > int(last):
					raise ValueError("Start and end should be in range of "\
					 + first + "-" + last)
				for line in line_list:
					data_arr = line.split()
					time = int(data_arr[0])
					state = data_arr[1]
					"""
					Add first element to change queue with the last known state
					"""
					if time <= start:
						change_queue = [[start, state]]	

					"""
					Handle each state change point between start and end 
					"""
					if start < time < end and state != change_queue[-1][1]:
						# For all state changes, calculate duration of previous state and add to last element in change queue.
						change_queue[-1].append(time -\
						 change_queue[-1][0])
						# Append a new state element to change queue with new state and time of state change
						change_queue.append([time, state])

					"""
					Update the last element in change queue with duration of last state at end time 
					"""
					if time >= end:
						change_queue[-1].append(end -\
						 change_queue[-1][0])
						break

			except ValueError as e:
				raise

			except IndexError as ie:
				raise

	except IOError as e:
		raise

	return change_queue


class SVGGenerator:
	def __init__(self, change_queue, seconds_per_pixel, output_file):
		self.change_queue = change_queue
		self.seconds_per_pixel = seconds_per_pixel
		self.svg_drawing = svgwrite.drawing.Drawing(filename=output_file, viewBox="0 0 500 50") 

	"""
	Method to iterate over the change queue, create rect elements and add elements to svg_drawing 
	"""
	def addRectElements(self):
		
		self.x = 0

		for item in self.change_queue:
			fill = "white"
			if item[1] == "True":
				fill = "green"
			if item[1] == "False":
				fill = "red"
			width = item[2] / self.seconds_per_pixel
			element = svgwrite.shapes.Rect(insert=(self.x,0), size=(width,50), fill=fill)
			self.svg_drawing.add(element)
			self.x += width



if __name__ == "__main__":
	try:
		start = int(sys.argv[1])
		end = int(sys.argv[2])
		data_file = sys.argv[3]
		output_file = sys.argv[4]
		time_range = end - start
		if time_range <= 0:
			raise ValueError("End should be greater than start")
	except ValueError as ve:
		sys.exit(ve)
	except IndexError as ie:
		sys.exit("Insufficient arguments to script. Script takes 4 as start, end, input file and output file")
	
	try:
		change_queue = read_data_file(start, end, data_file)
	except ValueError as ve:
		sys.exit(ve)
	except IndexError as ie:
		sys.exit("Invalid data found in input file")
	except IOError as ioe:
		sys.exit("Please provide a valid datafile. " + data_file +\
		 " could not be opened for reading data.")

	"""
	Calculate the seconds per pixel by dividing total input time range by total width of view
	"""	
	seconds_per_pixel = float(time_range)/500

	"""
	Create an object of SVGGenerator class
	Parameters
	----------
	
	change_queue : 2-D list
	    as generated by reading input data file
	seconds_per_pixel : float
	    as calculated above
	output_file : str
	    output file received as command line argument

	"""	
	svg_object = SVGGenerator(change_queue, seconds_per_pixel, output_file)

	"""
	Call addRectElements method on the SVGGenerator object and save the output file

	"""
	svg_object.addRectElements()
	try:
		svg_object.svg_drawing.save()
	except IOError as ioe:
		sys.exit("Please provide a valid file path for output. " +\
		 output_file + " seems to be an invalid or restricted path.")

	sys.exit("Output svg file saved successfully")

